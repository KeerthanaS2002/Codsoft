import tkinter as tk
from tkinter import messagebox

class Task:
    def __init__(self, title):
        self.title = title
        self.completed = False

    def mark_as_completed(self):
        self.completed = True

    def __str__(self):
        status = "Completed" if self.completed else "Not Completed"
        return f"Title: {self.title}\nStatus: {status}\n"

class ToDoList:
    def __init__(self):
        self.tasks = []

    def add_task(self, title):
        task = Task(title)
        self.tasks.append(task)
        return task

    def update_task(self, index, title):
        if 0 <= index < len(self.tasks):
            self.tasks[index].title = title
            return True
        return False

    def remove_task(self, index):
        if 0 <= index < len(self.tasks):
            self.tasks.pop(index)
            return True
        return False

    def list_tasks(self):
        return self.tasks

    def mark_task_as_completed(self, index):
        if 0 <= index < len(self.tasks):
            self.tasks[index].mark_as_completed()
            return True
        return False

class ToDoListApp:
    def __init__(self, root):
        self.todo_list = ToDoList()
        self.root = root
        self.root.title("To-Do-List Application")
        self.root.geometry("500x500")
        self.root.configure(padx=10,pady=10)

        self.heading_label=tk.Label(root,text="To-Do-List",font=("Helvetica",16,"bold"))
        self.heading_label.pack(pady=10)

        self.task_listbox=tk.Listbox(root,width=50,height=10)
        self.task_listbox.pack(pady=10)

        self.task_entry_frame=tk.Frame(root)
        self.task_entry_frame.pack(pady=10)
        
        self.task_entry_label=tk.Label(self.task_entry_frame,text="Enter the task:")
        self.task_entry_label.grid(row=0,column=0,sticky="w")

        self.task_entry=tk.Entry(self.task_entry_frame,width=50)
        self.task_entry.grid(row=1,column=0,pady=5)

        self.add_button=tk.Button(root,text="Add Task",command=self.add_task,font=("Helvetica",10))
        self.add_button.pack(pady=5)

        self.update_button=tk.Button(root,text="Update Task",command=self.show_update_task_gui,font=("Helvetica",10))
        self.update_button.pack(pady=5)

        self.remove_button=tk.Button(root,text="Delete Task",command=self.remove_task,font=("Helvetica",10))
        self.remove_button.pack(pady=5)

        self.complete_button=tk.Button(root,text="Mark as Completed",command=self.mark_as_completed,font=("Helvetica", 10))
        self.complete_button.pack(pady=5)

    def add_task(self):
        task_title = self.task_entry.get()
        if task_title:
            self.todo_list.add_task(task_title)
            self.update_task_listbox()
            self.task_entry.delete(0, tk.END)
            messagebox.showinfo("Success","Task added successfully!")
        else:
            messagebox.showwarning("Input Error","Task title cannot be empty")

    def update_task_listbox(self):
        self.task_listbox.delete(0, tk.END)
        for i, task in enumerate(self.todo_list.list_tasks()):
            task_status=" (Completed)" if task.completed else ""
            self.task_listbox.insert(tk.END, f"{i + 1}. {task.title}{task_status}")
            if task.completed:
                self.task_listbox.itemconfig(i, {'fg':'green'})

    def mark_as_completed(self):
        selected_task_index=self.task_listbox.curselection()
        if selected_task_index:
            index = selected_task_index[0]
            if self.todo_list.mark_task_as_completed(index):
                self.update_task_listbox()
                messagebox.showinfo("Success","Task marked as completed!")
            else:
                messagebox.showerror("Error","Invalid task selection")
        else:
            messagebox.showwarning("Selection Error","No task selected")

    def remove_task(self):
        selected_task_index=self.task_listbox.curselection()
        if selected_task_index:
            index=selected_task_index[0]
            if self.todo_list.remove_task(index):
                self.update_task_listbox()
                messagebox.showinfo("Success","Task deleted successfully!")
            else:
                messagebox.showerror("Error","Invalid task selection")
        else:
            messagebox.showwarning("Selection Error","No task selected")

    def show_update_task_gui(self):
        selected_task_index=self.task_listbox.curselection()
        if selected_task_index:
            self.index_to_update=selected_task_index[0]
            self.update_window=tk.Toplevel(self.root)
            self.update_window.title("Update Task")
            self.update_window.geometry("300x150")
            self.update_window.configure(padx=10, pady=10)
            
            x = self.root.winfo_x() + self.root.winfo_width()
            y = self.root.winfo_y()
            self.update_window.geometry(f"+{ 10+x}+{10+y}")

            tk.Label(self.update_window, text="Enter new task:", anchor="w").pack(pady=5)
            self.update_entry = tk.Entry(self.update_window, width=40)
            self.update_entry.pack(pady=5)
            self.update_entry.insert(0, self.todo_list.list_tasks()[self.index_to_update].title)

            button_frame=tk.Frame(self.update_window)
            button_frame.pack(pady=10)
            self.ok_button=tk.Button(button_frame,text="Ok",command=self.update_task,font=("Helvetica",10))
            self.ok_button.pack(side=tk.LEFT, padx=5)
            self.cancel_button=tk.Button(button_frame,text="Cancel",command=self.update_window.destroy,font=("Helvetica",10))
            self.cancel_button.pack(side=tk.LEFT, padx=5)
        else:
            messagebox.showwarning("Selection Error","No task selected")

    def update_task(self):
        new_title = self.update_entry.get()
        if new_title:
            if self.todo_list.update_task(self.index_to_update, new_title):
                self.update_task_listbox()
                self.update_window.destroy()
                messagebox.showinfo("Success","Task updated successfully!")
            else:
                messagebox.showerror("Error","Invalid task selection")
        else:
            messagebox.showwarning("Input Error","Task title cannot be empty")

if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoListApp(root)
    root.mainloop()
